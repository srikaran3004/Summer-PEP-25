HTTP response status codes are grouped into five classes, indicating whether a specific HTTP request has been successfully completed. The codes from 100 to 500 encompass Informational responses, Successful responses, Redirection messages, and Client error responses.

Here are notes for HTTP status codes from 100 to 500, including their purposes and typical real-life applications:

### Informational Responses (100 – 199)
These interim responses indicate that the request has been received and understood, and the process is continuing.

*   **100 Continue**: This interim response indicates that the client should **continue the request** or ignore the response if the request is already finished. In practice, a client might send only headers and wait for this response before sending the request body, especially for large uploads, to ensure the server is willing to accept the request.
*   **101 Switching Protocols**: This code is sent in response to an `Upgrade` request header from the client and indicates the **protocol the server is switching to**. A common real-life example is upgrading an HTTP connection to a WebSocket connection.
*   **102 Processing (WebDAV)**: This code was used in WebDAV contexts to indicate that a request has been received by the server, but **no status was available at the time of the response**. It is now deprecated.
*   **103 Early Hints**: This status code is primarily intended to be used with the `Link` header, letting the user agent **start preloading resources** while the server prepares a response or preconnect to an origin from which the page will need resources. This can improve page load performance by allowing browsers to fetch critical resources sooner.

### Successful Responses (200 – 299)
These codes indicate that the client's request was successfully received, understood, and accepted.

*   **200 OK**: The **request succeeded**. The meaning of "success" depends on the HTTP method used:
    *   **GET**: The requested resource has been fetched and transmitted in the message body. This is the most common successful response for fetching web pages or data.
    *   **HEAD**: Representation headers are included in the response without any message body. Used to get metadata about a resource without transferring the whole content.
    *   **PUT or POST**: The resource describing the result of the action is transmitted in the message body. Typically indicates that data was successfully created or updated.
    *   **TRACE**: The message body contains the request as received by the server. Used for debugging HTTP request chains.
*   **201 Created**: The request succeeded, and a **new resource was created as a result**. This is typically the response sent after `POST` requests (e.g., submitting a form that creates a new user account) or some `PUT` requests.
*   **202 Accepted**: The request has been **received but not yet acted upon**. It is noncommittal, as there is no way in HTTP to later send an asynchronous response indicating the outcome of the request. It is intended for cases where another process or server handles the request, or for batch processing, such as a long-running background job initiated by the client.
*   **203 Non-Authoritative Information**: This response code means the **returned metadata is not exactly the same as is available from the origin server**, but is collected from a local or a third-party copy. This is mostly used for mirrors or backups of another resource. The 200 OK response is preferred unless in this specific case.
*   **204 No Content**: There is **no content to send for this request, but the headers are useful**. The user agent may update its cached headers for this resource with the new ones. This is often used for `PUT` requests that successfully update a resource but don't need to return any specific data, or for `DELETE` requests.
*   **205 Reset Content**: Tells the user agent to **reset the document which sent this request**. This can be used after a form submission to clear the form fields on the client-side.
*   **206 Partial Content**: This response code is used in response to a **range request when the client has requested a part or parts of a resource**. For example, when a media player streams a video and only requests specific chunks of the file.
*   **207 Multi-Status (WebDAV)**: Conveys information about **multiple resources**, for situations where multiple status codes might be appropriate. Commonly used in Web Distributed Authoring and Versioning (WebDAV) operations.
*   **208 Already Reported (WebDAV)**: Used inside a `<dav:propstat>` response element to avoid repeatedly enumerating the internal members of multiple bindings to the same collection.
*   **226 IM Used (HTTP Delta encoding)**: The server has fulfilled a `GET` request for the resource, and the response is a representation of the result of **one or more instance-manipulations applied to the current instance**.

### Redirection Messages (300 – 399)
These codes indicate that further action needs to be taken by the user agent to fulfill the request.

*   **300 Multiple Choices**: In agent-driven content negotiation, the request has **more than one possible response, and the user agent or user should choose one of them**. There is no standardized way for clients to automatically choose, so this is rarely used.
*   **301 Moved Permanently**: The **URL of the requested resource has been changed permanently**. The new URL is given in the response. Clients (like browsers and search engines) are expected to update their links and caches to the new URL.
*   **302 Found**: This response code means that the **URI of the requested resource has been changed *temporarily***. Further changes in the URI might be made in the future, so the same URI should be used by the client in future requests. Often used for temporary redirects, such as during site maintenance.
*   **303 See Other**: The server sent this response to direct the client to **get the requested resource at another URI with a `GET` request**. This is commonly used after a `POST` request to redirect the client to a different page, preventing form re-submission issues (Post/Redirect/Get pattern).
*   **304 Not Modified**: This is used for **caching purposes**. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response. This saves bandwidth and improves performance for frequently accessed resources.
*   **305 Use Proxy**: This code was defined in a previous version of the HTTP specification to indicate that a requested response **must be accessed by a proxy**. It has been deprecated due to security concerns regarding in-band configuration of a proxy.
*   **306 unused**: This response code is **no longer used** but is reserved. It was used in a previous version of the HTTP/1.1 specification.
*   **307 Temporary Redirect**: The server sends this response to direct the client to get the requested resource at **another URI with the *same method* that was used in the prior request**. This has the same semantics as the 302 Found response, with the important exception that the user agent *must not* change the HTTP method used (e.g., if a `POST` was used, a `POST` must be used in the redirected request).
*   **308 Permanent Redirect**: This means that the **resource is now permanently located at another URI**, specified by the `Location` response header. This has the same semantics as the 301 Moved Permanently response code, with the exception that the user agent *must not* change the HTTP method used (e.g., if a `POST` was used, a `POST` must be used in the second request).

### Client Error Responses (400 – 499)
These error codes indicate that the client appears to have made an error.

*   **400 Bad Request**: The server cannot or will not process the request due to **something perceived to be a client error** (e.g., malformed request syntax, invalid request message framing, or deceptive request routing). This can happen if a client sends invalid JSON in a request body.
*   **401 Unauthorized**: Although the HTTP standard specifies "unauthorized," semantically this response means **"unauthenticated."** That is, the client must authenticate itself to get the requested response. Often seen when accessing a protected API endpoint without a valid authentication token.
*   **402 Payment Required**: The initial purpose of this code was for digital payment systems; however, this status code is **rarely used**, and no standard convention exists.
*   **403 Forbidden**: The client **does not have access rights to the content**; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server, but they lack the necessary permissions. Servers may also send this response instead of 404 Not Found to hide the existence of a resource from an unauthorized client.
*   **404 Not Found**: The **server cannot find the requested resource**. In a browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the specific resource itself does not exist (e.g., requesting user ID 999 when only 1-100 exist). This response code is probably the most well known due to its frequent occurrence on the web for broken links or mistyped URLs.
*   **405 Method Not Allowed**: The **request method is known by the server but is not supported by the target resource**. For example, an API may not allow a `DELETE` request on a particular resource, or the `TRACE` method entirely.
*   **406 Not Acceptable**: This response is sent when the web server, after performing server-driven content negotiation, **doesn't find any content that conforms to the criteria given by the user agent** (e.g., the `Accept` header specifies JSON, but the server can only return XML).
*   **407 Proxy Authentication Required**: This is similar to 401 Unauthorized but **authentication is needed to be done by a proxy**.
*   **408 Request Timeout**: This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to **shut down this unused connection**.
*   **409 Conflict**: This response is sent when a **request conflicts with the current state of the server**. In WebDAV remote web authoring, 409 responses are errors sent to the client so that a user might be able to resolve a conflict and resubmit the request. An example is trying to update a resource that has been modified by another user since the client last fetched it.
*   **410 Gone**: This response is sent when the **requested content has been permanently deleted from the server, with no forwarding address**. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for "limited-time, promotional services".
*   **411 Length Required**: The server rejected the request because the **`Content-Length` header field is not defined and the server requires it**.
*   **412 Precondition Failed**: In conditional requests, the client has indicated **preconditions in its headers which the server does not meet**. For example, if a client tries to update a resource with an `If-Match` header containing an old ETag value, indicating the resource has been modified.
*   **413 Content Too Large**: The **request body is larger than limits defined by the server**. The server might close the connection or return a `Retry-After` header field.
*   **414 URI Too Long**: The **URI requested by the client is longer than the server is willing to interpret**. This can happen with extremely long query strings.
*   **415 Unsupported Media Type**: The **media format of the requested data is not supported by the server**, so the server is rejecting the request. For instance, sending an image file when the endpoint expects a JSON payload.
*   **416 Range Not Satisfiable**: The **ranges specified by the `Range` header field in the request cannot be fulfilled**. It's possible that the range is outside the size of the target resource's data.
*   **417 Expectation Failed**: This response code means the **expectation indicated by the `Expect` request header field cannot be met by the server**.
*   **418 I'm a teapot**: The server refuses the attempt to brew coffee with a teapot. This is an April Fool's joke status code from RFC 2324.
*   **421 Misdirected Request**: The request was directed at a server that is **not able to produce a response**. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI.
*   **422 Unprocessable Content (WebDAV)**: The request was well-formed but was **unable to be followed due to semantic errors**. For example, a request to create a resource with missing required fields, even if the JSON format is correct.
*   **423 Locked (WebDAV)**: The resource that is being accessed is **locked**.
*   **424 Failed Dependency (WebDAV)**: The request failed due to **failure of a previous request**.
*   **425 Too Early (Experimental)**: Indicates that the server is **unwilling to risk processing a request that might be replayed**.
*   **426 Upgrade Required**: The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. The server sends an `Upgrade` header in a 426 response to indicate the required protocol(s).
*   **428 Precondition Required**: The origin server **requires the request to be conditional**. This response is intended to prevent the 'lost update' problem, where a client `GET`s a resource's state, modifies it, and `PUT`s it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.
*   **429 Too Many Requests**: The user has sent **too many requests in a given amount of time (rate limiting)**. This is commonly used by APIs to prevent abuse or overload.
*   **431 Request Header Fields Too Large**: The server is unwilling to process the request because its **header fields are too large**. The request may be resubmitted after reducing the size of the request header fields.
*   **451 Unavailable For Legal Reasons**: The user agent requested a resource that **cannot legally be provided**, such as a web page censored by a government.

### Server Error Responses (500 – 599)
These codes indicate that the server failed to fulfill an apparently valid request.

*   **500 Internal Server Error**: The server has encountered a situation it **does not know how to handle**. This error is generic, indicating that the server cannot find a more appropriate 5xx status code to respond with.
*   **501 Not Implemented**: This response indicates that the **request method is not supported by the server** and therefore cannot be handled. Servers are only required to support GET and HEAD methods.
*   **502 Bad Gateway**: This error response signifies that the server, while acting as a gateway or proxy to fulfill the request, **received an invalid response** from an upstream server.
*   **503 Service Unavailable**: The server is **not ready to handle the request**. Common reasons include the server being down for maintenance or being overloaded. This response should be used for temporary conditions, and ideally, the `Retry-After` HTTP header should be included to estimate the recovery time. Webmasters should also manage caching-related headers for these temporary responses, as they should generally not be cached.
*   **504 Gateway Timeout**: This error response occurs when the server is acting as a gateway and **does not receive a response in time** from an upstream server.
*   **505 HTTP Version Not Supported**: The server does not support the **HTTP version** used in the client's request.
*   **506 Variant Also Negotiates**: This indicates an **internal server configuration error** where, during content negotiation, the chosen variant is itself configured to engage in content negotiation, leading to circular references.
*   **507 Insufficient Storage (WebDAV)**: The server is **unable to store the representation needed to successfully complete the request**. This is specific to WebDAV contexts.
*   **508 Loop Detected (WebDAV)**: The server **detected an infinite loop** while processing the request. This is also specific to WebDAV.
*   **510 Not Extended**: The client request declares an **HTTP Extension (RFC 2774) that should be used to process the request, but the extension is not supported** by the server.
*   **511 Network Authentication Required**: This status code indicates that the **client needs to authenticate to gain network access**.

HTTP Request methods->GET, POST, PUT, DELETE, PATCH